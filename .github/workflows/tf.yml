# dynamic name ?
name: 'Terraform Module Pipeline'

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
# required to use OIDC authentication
# permissions:
#   contents: read
#   id-token: write

defaults:
  run:
    shell: bash

jobs:
  version-bumps:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Check if version file updated
      id: version-file-updated
      uses: tj-actions/changed-files@v34
      with:
        files: |
            VERSION
    - name: Fail and notify if VERSION file not bumped
      if: steps.version-file-updated.outputs.any_changed != 'true'
      run: |
        echo "VERSION file needs to be updated"
        exit 1
    - name: Check if changelog file updated
      id: changelog-file-updated
      uses: tj-actions/changed-files@v34
      with:
        files: |
            changelog.md
    - name: Fail and notify if changelog file not updated
      if: steps.changelog-file-updated.outputs.any_changed != 'true'
      run: |
        echo "changelog.md file needs to be updated"
        exit 1
  # tfsec:
  #   name: "tfsec"
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: tfsec
  #     uses: aquasecurity/tfsec-action@v1.0.0

  tflint:
    name: "tflint"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: terraform-linters/setup-tflint@v2
      name: Setup TFLint
      with:
        tflint_version: v0.38.1
    - name: Show version
      run: tflint --version
    - name: Init TFLint
      run: tflint --init
    - name: Run TFLint
      run: tflint -f compact

  terraform-fmt:
    name: "terraform-fmt"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.4      
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

  terraform-validate:
    name: "validate"
    runs-on: ubuntu-latest
    needs:
      - tflint
      - version-bumps
      - terraform-fmt
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.4
    - name: terraform validate
      run: |
        terraform init
        terraform validate
  terraform-plan:
    name: "plan"
    runs-on: ubuntu-latest
    needs:
      - terraform-validate
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.4
    - name: terraform plan
      id: plan
      run: |
        terraform init
        terraform plan -out plan.out

    - name: Post Plan
      # if: always()
      if: always() && github.ref != 'refs/heads/main' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}

    - name: Upload plan artefact
      uses: actions/upload-artifact@v2
      with:
        name: plan
        path: plan.out

  terraform-apply:
    name: "apply"
    needs:
      - terraform-plan
      # - tfsec
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: actions/download-artifact@v2
      with:
        name: plan
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.4
    - name: terraform apply
      run: |
        terraform init
        terraform apply plan.out

  bats-test:
    name: "bats-test"
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Install bats
      run: |
        npm install -g bats@1.8.2
    - name: Run bats
      run: |
        bats bats/aws-s3-ls.sh

  terratest-todo:
    name: "terratest-todo"
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
    - name: Run terratest-todo
      run: |
        echo "Run something sensible"
        echo "Reference - https://github.com/gruntwork-io/terratest-todo/blob/master/test/terraform_aws_s3_example_test.go"

  terraform-destroy:
    name: "destroy"
    runs-on: ubuntu-latest
    needs: bats-test
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.4
    - name: Terraform Destroy
      if: always()
      run: |
        terraform init
        terraform destroy -auto-approve

  terraform-docs:
    name: "terraform-docs"
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Render terraform docs inside the README.md and push changes back to PR branch
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        working-dir: .
        output-file: README.md
        output-method: inject
        git-push: "true"
